#include <queue>
void bfs(int row, int col, vector<vector<int>>& vis, int** arr, int n, int m) {
    vis[row][col] = 1;
    queue<pair<int, int>> q;
    q.push({row, col});

    while (!q.empty()) {
        int currRow = q.front().first;
        int currCol = q.front().second;
        q.pop();

        int dr[] = {-1, -1, -1, 0, 0, 1, 1, 1};
        int dc[] = {-1, 0, 1, -1, 1, -1, 0, 1};

        for (int i = 0; i < 8; i++) {
            int newRow = currRow + dr[i];
            int newCol = currCol + dc[i];

            if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && arr[newRow][newCol] == 1 && !vis[newRow][newCol]) {
                vis[newRow][newCol] = 1;
                q.push({newRow, newCol});
            }
        }
    }
}

int getTotalIslands(int** arr, int n, int m)
{
   vector<vector<int>> vis(n, vector<int>(m, 0));
    int cnt = 0;

    for (int row = 0; row < n; row++) {
        for (int col = 0; col < m; col++) {
            if (!vis[row][col] && arr[row][col] == 1) {
                cnt++;
                bfs(row, col, vis, arr, n, m);
            }
        }
    }

    return cnt;
  
}
