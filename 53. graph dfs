void dfs(int node, vector<int> adj[], int* vis, vector<int>& ls) {
    vis[node] = 1;
    ls.push_back(node);
    for (auto it : adj[node]) {
        if (!vis[it]) {
            dfs(it, adj, vis, ls);
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>>& edges) {
    vector<int> adj[V];
    for (auto edge : edges) {
        int u = edge[0];
        int v = edge[1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    int vis[V] = {0};
    vector<vector<int>> result;
    for (int i = 0; i < V; i++) {
        if (!vis[i]) {
            vector<int> ls;
            dfs(i, adj, vis, ls);
            result.push_back(ls);
        }
    }

    return result;
}
